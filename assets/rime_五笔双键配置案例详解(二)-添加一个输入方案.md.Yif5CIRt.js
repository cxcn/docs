import{_ as i,c as s,o as a,U as l}from"./chunks/framework.WKpLpN6N.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"rime/五笔双键配置案例详解(二)-添加一个输入方案.md","filePath":"trime.wiki/五笔双键配置案例详解(二)-添加一个输入方案.md"}'),e={name:"rime/五笔双键配置案例详解(二)-添加一个输入方案.md"},t=l(`<h2 id="五笔双键配置案例详解-二-添加一个输入方案" tabindex="-1">五笔双键配置案例详解(二) 添加一个输入方案 <a class="header-anchor" href="#五笔双键配置案例详解-二-添加一个输入方案" aria-label="Permalink to &quot;五笔双键配置案例详解(二) 添加一个输入方案&quot;">​</a></h2><p>把大象装到冰箱里分几步？<br> 答: 三步：</p><ol><li>把冰箱门打开</li><li>把大象推进去</li><li>把冰箱门关上</li></ol><p>添加一个输入方案分几步？<br> 答: 也是三步:</p><ol><li>得到一份方案 (编写或者复制)</li><li>为输入方案定义schema_id和name</li><li>将输入方案schema_id添加到default.yaml的shcema_list中</li></ol><p>OK,现在按Ctrl+~就可以切换了。</p><h3 id="得到输入方案" tabindex="-1">得到输入方案 <a class="header-anchor" href="#得到输入方案" aria-label="Permalink to &quot;得到输入方案&quot;">​</a></h3><p>由于五笔双键是在wubi86的基础上的，所以，你必须有原始的wubi86.schema.yaml和wubi86.dict.yaml这两个文件。 wubi86.schema.yaml存放的是wubi的方案的一般处理流程，我们有了这个模板，就可以方便地进行修改。 wubi86.dict.yaml这个文件存放的是wubi86的码表，即所有的汉字、词组和对应的编码。我们会在这个码表的基础上进行模糊音处理，从而生成一个新的，适合双键的码表。</p><p>闲话少说，总之第一步就是原来的wubi86.schema.yaml复制一份，重命名为wubi86_double_key.schema.yaml</p><h3 id="生成新的输入方案" tabindex="-1">生成新的输入方案 <a class="header-anchor" href="#生成新的输入方案" aria-label="Permalink to &quot;生成新的输入方案&quot;">​</a></h3><p>第二步，就是在前一步基础上，将wubi86_double_key.schema.yaml文件中下面两项给替换掉:</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">　schema_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wubi86_double_key</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">　#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">id是给系统看的，系统中引用都是通过它</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;五笔86双键版&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">　　　#</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">name是给人看的，切换输入方案的时候，这个名字就会出现</span></span></code></pre></div><p>说明: 替换schema_id，是因为每个输入方案必须有一个独立的标识（后面会用到）。 替换了name，是给人看的。</p><h3 id="添加方案到系统列表" tabindex="-1">添加方案到系统列表 <a class="header-anchor" href="#添加方案到系统列表" aria-label="Permalink to &quot;添加方案到系统列表&quot;">​</a></h3><p>经过上面的两步，我们其实就已经有了一个名字独一无二的输入方案。虽然输入主案的内容与wubi86一模一样，但是至少我们先配置一下，然后就可以在系统方案中看到他。 在 default.custom.yaml文件添加我们的方案id。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">patch</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  schema_list</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">schema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wubi86</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">    - </span><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">schema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wubi86_double_key</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">   #我们的方案ID</span></span></code></pre></div><p><strong>重新布署</strong></p><p>现在切换到小狼毫，然后按下小狼毫的热键，Ctrl+\` 或者F4试试 现在是不是就可以看到我们的输入方案的名称了？ 切换过去试一下，是不是跟系统自带的五笔一模一样？</p><h3 id="提高篇" tabindex="-1">提高篇 <a class="header-anchor" href="#提高篇" aria-label="Permalink to &quot;提高篇&quot;">​</a></h3><p>如果你有兴趣深究，还可以切换到%AppData%/rime路径下，看看重新布署后，到底生成了哪些文件。 其实生成的文件中以wubi86开头的文件，只有三个:</p><ul><li>wubi86.prism.bin #输入法的棱镜文件</li><li>wubi86.reverse.bin　 #输入法反查的文件</li><li>wubi86.table.bin #输入法的码表文件</li></ul><p>由于我的码表文件共用的是wubi86的文件，所以我们跟wubi86其实是共用的一套输入法棱镜文件。 看wubi86_double_key.yaml中的内容，就知道了。</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">translator</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  dictionary</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wubi86</span><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    #注意这里,其实引用的是wubi86.dict.yaml码表文件</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  enable_charset_filter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  enable_encoder</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">true</span></span></code></pre></div><h3 id="小结" tabindex="-1">小结 <a class="header-anchor" href="#小结" aria-label="Permalink to &quot;小结&quot;">​</a></h3><p>现在，你可以回顾一下前面学到的知识。</p><ol><li>每个输入方案，有两个名字: schema_id和name。一个是系统使用，一个是显示给人看。</li><li>定义了输入方案和schema_id后，只要将schema_id添加到default.custom.yaml文件的schema_list中。就可以切换到该输入方案了。</li></ol>`,26),h=[t];function n(p,k,r,d,c,o){return a(),s("div",null,h)}const u=i(e,[["render",n]]);export{_ as __pageData,u as default};
