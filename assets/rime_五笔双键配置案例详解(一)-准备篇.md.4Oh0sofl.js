import{_ as s,c as i,o as a,U as l}from"./chunks/framework.WKpLpN6N.js";const y=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"rime/五笔双键配置案例详解(一)-准备篇.md","filePath":"trime.wiki/五笔双键配置案例详解(一)-准备篇.md"}'),e={name:"rime/五笔双键配置案例详解(一)-准备篇.md"},n=l(`<h2 id="五笔双键配置案例详解-一-准备篇" tabindex="-1">五笔双键配置案例详解(一) 准备篇 <a class="header-anchor" href="#五笔双键配置案例详解-一-准备篇" aria-label="Permalink to &quot;五笔双键配置案例详解(一) 准备篇&quot;">​</a></h2><p>这是我认识同文和小狼毫以来，配置的第一个输入方案。感谢全程有@xiaoqun2016和@osfans老大的细致而耐心的指导。 记下整个过程，方便后来者学习。 通过本案例，你可以学到：</p><ul><li>小狼毫的一般配置和调试流程</li><li>小狼毫模糊音的使用</li><li>同文键盘的配置和对已有键盘布局的修改</li><li>键盘的切换</li></ul><h3 id="一般的调试流程" tabindex="-1">一般的调试流程 <a class="header-anchor" href="#一般的调试流程" aria-label="Permalink to &quot;一般的调试流程&quot;">​</a></h3><p>&quot;工欲善其事，必先利其器&quot;。搭建好下开发环境，使用良好的配置工具，做事可以事半功倍。</p><h4 id="文本编辑器" tabindex="-1">文本编辑器 <a class="header-anchor" href="#文本编辑器" aria-label="Permalink to &quot;文本编辑器&quot;">​</a></h4><p>我使用的是gVim，在Windows下。 Vim编辑yaml文件有很多好处:</p><ul><li>Vim自带了yaml文件的语法高亮，方便查看</li><li>小狼毫自带的yaml文件开头都配有vim的modeline行，会自动设置好缩进等相关选项，方便编辑</li><li>Vim本身也很强大，使用范围广，教程多，而且开源免费</li></ul><h4 id="调试流程" tabindex="-1">调试流程 <a class="header-anchor" href="#调试流程" aria-label="Permalink to &quot;调试流程&quot;">​</a></h4><ol><li>将你要反复修改或者反复打patch修改的yaml文件复制一份，放到你的工作目录(这样防止修改错了需要回厂)</li><li>在工作目录创建XX.custom.yaml文件(如果已有就不要创建了) -- 建议不要在原文件上修改,而是通过打patch方法修改</li><li>有两个批处理脚本如下,你可以直接复制过去使用</li></ol><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">::</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> rime.bat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wubi86_double_key.schema.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %appdata%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ime</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">copy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wubi86.dict.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> %appdata%</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\r</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">ime</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">start</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> WeaselDeployer.exe</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /deploy</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">   ::重要的是这句，需要将小狼毫的安装目录添加到path环境变量中</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> 或者写成这样</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">rem</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;C:\\Program Files\\Rime\\weasel-0.9.14\\WeaselDeployer.exe&quot;</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /deploy</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span></span></code></pre></div><p>如果是在手机上调试同文输入法，则使用下面的:</p><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">::</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trime.bat</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trime.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sdcard/rime</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> trime.custom.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sdcard/rime</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> push</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> wubi86_double_key.schema.yaml</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> /sdcard/rime</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">adb</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> shell</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> am</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> broadcast</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> -a</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> com.osfans.trime.deploy</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">pause</span></span></code></pre></div><p>这样做的好处，就是每次修改，都相当于把系统文件恢复到你打patch之前的状态，你打patch造成的错误不会累积。</p><h3 id="定制输入方案" tabindex="-1">定制输入方案 <a class="header-anchor" href="#定制输入方案" aria-label="Permalink to &quot;定制输入方案&quot;">​</a></h3><p>我要实现的键盘效果如下所示:</p><p><img src="https://camo.githubusercontent.com/01fb5abfd965c718657763629f695be8aa33ef6e/687474703a2f2f696d672e626c6f672e6373646e2e6e65742f3230313630353031313132393337393336" alt="五笔双键"></p><p>实现效果类似九宫格，但是因为一个键上只有两个键同时又保留了电脑上的键盘布局。所以，保留了五笔的输入模式。</p><p>大致的步骤是（这也是本系列文章的标题）:</p><ol><li>先复制wubi86的输入法方案,实现自己的方案</li><li>添加模糊音，实现双键方案</li><li>对双键方案进行调整完善（码表共享和词频调整）</li><li>在手机上定义双键键盘，实现中文输入</li><li>定义键盘切换，实现英文输入</li><li>对输入方案优化　（符号选2-3候选字等等）</li></ol><p>1－3都是在电脑的小狼毫进行调试，4－6则是在手机的同文输入法上进行调试。</p>`,21),t=[n];function h(p,k,r,F,d,o){return a(),i("div",null,t)}const g=s(e,[["render",h]]);export{y as __pageData,g as default};
