import{_ as s,c as a,o as t,U as e}from"./chunks/framework.WKpLpN6N.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"rime/trimer小知识(1)---Yaml文件开头注释是什么意思？.md","filePath":"trime.wiki/trimer小知识(1)---Yaml文件开头注释是什么意思？.md"}'),i={name:"rime/trimer小知识(1)---Yaml文件开头注释是什么意思？.md"},n=e(`<p>编辑小狼毫的方案及配置项文件时，通常会看到这样文件开头：</p><div class="language-yaml vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">yaml</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># wubi86_double_key.yaml</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># vim: set sw=2 sts=2 et:     </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># encoding: utf-8</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">schema</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  schema_id</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">wubi86_double_key</span></span>
<span class="line"><span style="--shiki-light:#22863A;--shiki-dark:#85E89D;">  name</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;五笔86双键版&quot;</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">...</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">.</span></span></code></pre></div><p>那么开头的注释有什么含义呢？</p><h3 id="第一行详解" tabindex="-1">第一行详解 <a class="header-anchor" href="#第一行详解" aria-label="Permalink to &quot;第一行详解&quot;">​</a></h3><p>第一行比较简单，一般要放文件名，或者其他注释，不要放正式内容。为了防止加了Bom的utf-8文件无法解析。 具体原因见, <a href="https://github.com/rime/home/wiki/RimeWithSchemata" target="_blank" rel="noreferrer"> Rime 輸入方案設計書</a></p><blockquote><p>鑑於一些文本編輯器會爲 UTF-8 編碼的文件添加 BOM 標記，爲防止誤將該字符混入文中， 莫要從文件的第一行開始正文，而請在該行行首以 # 記號起一行註釋</p></blockquote><p>因为默认的文件存储格式是utf-8,而utf-8又分带bom和不带bom两种格式。 带bom会在开头添加几个字节，方便程序判断一个文本是否为utf-8编码。</p><p>如果你是程序员，要编写程序读写utf-8,还可以看看这里的bom详解：　<a href="http://www.cnblogs.com/findumars/p/3620078.html" target="_blank" rel="noreferrer">UTF8最好不要带BOM，附许多经典评论</a></p><h3 id="第二行详解" tabindex="-1">第二行详解 <a class="header-anchor" href="#第二行详解" aria-label="Permalink to &quot;第二行详解&quot;">​</a></h3><p><strong>正式开始最重要的一行，就是第二行</strong></p><p><code># vim: set sw=2 sts=2 et: </code></p><p>这是什么意思呢？</p><p>这一行有个学名叫modeline，是vim专用的。 用vim打开这个文件时，会自动运行该命令，设置好阅读和编辑该文件的一些参数</p><p><a href="http://stackoverflow.com/questions/7119824/what-is-vims-feature-name-for-this-vimsw-4ts-4et" target="_blank" rel="noreferrer">StackOverflow上关于modeline的解释</a></p><p>命令的具体含义，参看下面的解答</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>&quot;vim中每个命令都是简写和全拼两种模式，后面列出命令的全拼，大家就知道什么意思了</span></span>
<span class="line"><span>set sw=2  &quot;sw即shiftwidth,设置自动缩进 2 个空格</span></span>
<span class="line"><span>set sts=2 &quot;即设置 softtabstop 为 2. 输入 tab 后就跳了 2 格</span></span>
<span class="line"><span>set et   &quot;设置expandtab,即将tab扩展为空格,如果要取消这个选项，为　:set noet </span></span>
<span class="line"><span>&quot; vim的开头命令，都是在前面加no表取消</span></span></code></pre></div><p>命令之间是通过空格或者&quot;:&quot;分隔的，最后那个&quot;:&quot;起分隔作用，表示设置结束</p><p>所以，总结一下就是，编辑yaml文件的具体环境为：</p><ul><li>自动缩进为2</li><li>tab键缩进相当于2个空格</li><li>将tab键自动扩展为空格</li></ul><p>当然，也可以把上面的命令写在_vimrc中，作为全局设置。 这样，打开编辑其他的，没有带modeline的文件时，也可以使用统一的设置。</p><h3 id="更多的vim设置" tabindex="-1">更多的vim设置 <a class="header-anchor" href="#更多的vim设置" aria-label="Permalink to &quot;更多的vim设置&quot;">​</a></h3><p>vim中还有一些其他的缩进相关的设置也列在这里</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span>set tabstop=4 &quot;实际的 tab 即为 4 个空格, 而不是缺省的 8 个</span></span>
<span class="line"><span></span></span>
<span class="line"><span># 设置自动的缩进风格</span></span>
<span class="line"><span>set ai &quot;设置自动缩进</span></span>
<span class="line"><span>set cindent &quot;设置使用 C/C++ 语言的自动缩进方式</span></span></code></pre></div><p>关于Vim的tabstop,softtabstop的区分，以及与shiftwidth，expandtab组合使用的具体含义。参见下面的帖子</p><p><a href="http://blog.csdn.net/chenxiang6891/article/details/41348073" target="_blank" rel="noreferrer">vim中tabstop、shiftwidth、softtabstop以及expandtab的关系</a></p>`,25),p=[n];function l(o,h,r,c,d,m){return t(),a("div",null,p)}const _=s(i,[["render",l]]);export{u as __pageData,_ as default};
